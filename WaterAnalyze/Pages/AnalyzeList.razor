@using Data
@inject WaterAnalyzeContext WaterAnalyzeContext
@inject NavigationManager Navigation
@page "/analyzeList"


<MudCard Style="display: flex; width: 70%; height: 30%;margin-left: auto;margin-right: auto; margin-top: 5%; box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px; ">
    <div Style="flex: 50%;">
        <MudImage Src='/img/paperOne.jpg' Style="width: 99%; object-fit: fill"></MudImage>
    </div>
    <div Style="flex: 50%;">
        <MudTable Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true"
                    Items="@Elements"
                    GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                    GroupFooterClass="mb-4"
                    Dense="true"
                    Filter="new Func<Analyze,bool>(FilterFunc1)"
                    @ref="_tableRef">
            <ToolBarContent>
                @* <MudText Typo="Typo.h6">Periodic Elements</MudText> *@
                
                <MudTextField @bind-Value="searchString1" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudSpacer />
                <MudButton Href="/analyzeInfo" Color="Color.Primary" Style="margin-left: auto;margin-right: auto;">Добавить анализ</MudButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Дата проведения анализа</MudTh>
                <MudTh>Направление</MudTh>
                <MudTh>Источник</MudTh>
                <MudTh>Лаборант</MudTh>
            </HeaderContent>
            <RowTemplate >
                <MudTd @onclick="() => NavigationToEditingAnalyze(context.Id.ToString())" DataLabel="Дата проведения анализа">@context.DateOfSelection.Value.ToShortDateString()</MudTd>
                <MudTd DataLabel="Направление">@WaterAnalyzeContext.Directions.Where(x => x.Id == WaterAnalyzeContext.Sources.Where(x => x.Id == context.SourceId).First().DirectionId).First().Title</MudTd>
                <MudTd DataLabel="Источник">@WaterAnalyzeContext.Sources.Where(x => x.Id == context.SourceId).First().Title</MudTd>
                <MudTd DataLabel="Частота отбора"> @WaterAnalyzeContext.Users.Where(x => x.Id == context.UserId).First().Surname @WaterAnalyzeContext.Users.Where(x => x.Id == context.UserId).First().Name</MudTd>
            </RowTemplate>
        @*     <GroupFooterTemplate>
                <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Total Mass: @context.Items.Sum((e) => e.Molar)</MudTh>
            </GroupFooterTemplate> *@
        </MudTable>
    </div>
</MudCard>
 
@code {
    private MudTable<Analyze> _tableRef;
    private string searchString1 = "";

    private IEnumerable<Analyze> Elements = new List<Analyze>();

    protected override async Task OnInitializedAsync()
    {
        Elements = WaterAnalyzeContext.Analyzes.ToList();
    }

    public void ToDirectionInfo(int id)
    {
        Navigation.NavigateTo($"/sourceInfo/{id}");
    }

    private bool FilterFunc1(Analyze element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Analyze element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (WaterAnalyzeContext.Users.Where(x => x.Id == element.UserId).First().Surname.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (WaterAnalyzeContext.Users.Where(x => x.Id == element.UserId).First().Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        // if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        //     return true;
        return false;
    }

    public void NavigationToEditingAnalyze(string analyze)
    {
        Navigation.NavigateTo($"/analyzeInfo/{analyze}");
    }
}