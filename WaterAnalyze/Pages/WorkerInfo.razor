@page "/workerInfo"
@page "/workerInfo/{workerId}"
@using Data
@using Microsoft.JSInterop
@inject ISnackbar Snackbar
@inject WaterAnalyzeContext WaterAnalyzeContext
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

  
<MudCard Elevation="5" Style="display: flex; width: 90%; border-radius: 15px; margin-left: auto;margin-right: auto; margin-top: 1%; align-self: center; align-items: center; justify-content: center;">
    <MudCard Elevation="0" Style="flex: 50%; border-radius: 10px; padding: 10px">
        <MudImage Elevation="5" Src='/img/paperOne.jpg' Style="width: 700px; height: 580px; object-fit: fill; border-radius: 10px;"></MudImage>
    </MudCard>
	<div Style="flex: 50%; ">
        <div>
            <div Class="d-flex mx-auto" style="display: inline-block;">
                <MudTextField T="String" Label="Фамилия:" Variant="Variant.Outlined" Style="font-size: 16px; margin: 2%" @bind-Value="@surname" />
                <MudTextField T="String" Label="Имя:" Variant="Variant.Outlined" Style="font-size: 16px; margin: 2%" @bind-Value="@name" />
            </div>
            <MudTextField T="String" Label="Отчество:" Variant="Variant.Outlined" Style=" font-size: 16px; margin: 1%" @bind-Value="@patronymic" />
        </div>
        <div>
            <MudTextField T="String" Label="Логин:" Variant="Variant.Outlined" Style="font-size: 16px; margin: 1%" @bind-Value="@login" />
            <MudTextField T="String" Label="Пароль:" Variant="Variant.Outlined" Style="font-size: 16px; margin: 1%" @bind-Value="@password" />
        </div>
        <br>
        <div Class="d-flex mx-auto" style="display: inline-block;">
            <MudButton Class="d-flex mx-auto" OnClick="AdminRole" Style="font-size: 16px; width: 30%; box-shadow: rgb(38, 57, 77) 0px 3px 3px -3px;" Color="Color.Primary" Variant="adminVariant">Администратор</MudButton>
            <MudButton Class="d-flex mx-auto" OnClick="LabRole" Style="font-size: 16px; width: 30%; box-shadow: rgb(38, 57, 77) 0px 3px 3px -3px;" Color="Color.Primary" Variant="labVariant">Лаборант</MudButton>
            <MudButton Class="d-flex mx-auto" OnClick="ZavRole" Style="font-size: 16px; width: 30%; box-shadow: rgb(38, 57, 77) 0px 3px 3px -3px;" Color="Color.Primary" Variant="zavVariant">Заведующий</MudButton>
        </div>
        <br>
        @if (!newOne)
        {
            <div Class="d-flex mx-auto" style="display: inline-block;">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="d-flex mx-auto" Style="margin: 15px; font-size: 16px; width: 30%; box-shadow: rgb(38, 57, 77) 0px 3px 3px -3px;" @onclick="RegistrationLabWorker">
                    Сохранить
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="d-flex mx-auto" Style="margin: 15px; font-size: 16px; width: 30%; box-shadow: rgb(38, 57, 77) 0px 3px 3px -3px;" @onclick="DeletingWorker">
                    Удалить
                </MudButton>
            </div>
        }
        else
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="d-flex mx-auto" Style="margin: 15px; font-size: 16px; width: 30%; box-shadow: rgb(38, 57, 77) 0px 3px 3px -3px;" @onclick="RegistrationLabWorker">
                Сохранить
            </MudButton>
        }
	</div>
</MudCard>

@* <MudGrid Style="width: 60%; height: 30%;display: block;margin-left: auto;margin-right: auto; margin-top: 2%;">
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=12</MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=6</MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=6</MudPaper>
    </MudItem>
    
</MudGrid> *@


@code {
    [Parameter]
    public string? workerId { get; set; }

    User user;
    Account account;
    Variant adminVariant = new Variant();
    Variant labVariant = new Variant();
    Variant zavVariant = new Variant();
    string? surname;
    string? name;
    string? patronymic;
    string? login;
    string? password;
    int? role;
    bool newOne;

    protected override void OnInitialized()
    {
        newOne = true;
        labVariant = Variant.Outlined;
        adminVariant = Variant.Outlined;
        zavVariant = Variant.Outlined;

        if (workerId != null)
        {
            user = WaterAnalyzeContext.Users.Where(x => x.Id == Convert.ToInt32(workerId)).First();

            surname = user.Surname;
            name = user.Name;
            patronymic = user.Patronymic;

            account = WaterAnalyzeContext.Accounts.Where(x => x.UserId == user.Id).First();
            login = account.Login;
            password = account.Password;
            newOne = false;

            string roleTitle = WaterAnalyzeContext.Roles.Where(x => x.Id == user.RoleId).First().Title;

            switch (roleTitle)
            {
                case "Администратор":
                    role = 1;
                    adminVariant = Variant.Filled;
                    labVariant = Variant.Outlined;
                    zavVariant = Variant.Outlined;
                    break;
                case "Лаборант":
                    role = 2;
                    adminVariant = Variant.Outlined;
                    labVariant = Variant.Filled;
                    zavVariant = Variant.Outlined;
                    break;
                case "Заведующий":
                    role = 1002;
                    adminVariant = Variant.Outlined;
                    labVariant = Variant.Outlined;
                    zavVariant = Variant.Filled;
                    break;
            }

        }


    }

    public void DeletingWorker()
    {
        // DBConnection.DeleteUserFromDataBase(user);
        // navigation.NavigateTo("/workerslist");
        // Snackbar.Add("Успешно удалено", Severity.Success);
    }

    public void AdminRole()
    {
        role = 1;
        adminVariant = Variant.Filled;
        labVariant = Variant.Outlined;
        zavVariant = Variant.Outlined;
    }

    public void LabRole()
    {
        role = 2;
        adminVariant = Variant.Outlined;
        labVariant = Variant.Filled;
        zavVariant = Variant.Outlined;
    }

    public void ZavRole()
    {
        role = 1002;
        adminVariant = Variant.Outlined;
        labVariant = Variant.Outlined;
        zavVariant = Variant.Filled;
    }

    public void RegistrationLabWorker()
    {
        if (workerId != null)
        {
            if (surname != null && name != null && password != null)
            {
                user.Surname = surname;
                user.Name = name;
                user.Patronymic = patronymic;
                account.Login = login;
                account.Password = password;
                user.RoleId = role;

                WaterAnalyzeContext.Users.Update(user);
                WaterAnalyzeContext.Accounts.Update(account);
                WaterAnalyzeContext.SaveChanges();
                // WaterAnalyzeContext.ChangeTracker.Clear();

                Snackbar.Add("Изменения сохранены", Severity.Success);

                Navigation.NavigateTo("/workerList");
            }
            else
            {
                Snackbar.Add("Не все поля заполнены корректно.", Severity.Error);
            }
        }
        else
        {
            if (surname != null && name != null && login != null &&
            password != null && role != null && role != null)
            {
                if (WaterAnalyzeContext.Accounts.Where(x => x.Login == login).FirstOrDefault() == null)
                {
                    User newUser = new User()
                    {
                        Surname = surname,
                        Name = name,
                        Patronymic = patronymic,
                        RoleId = role
                    };

                    WaterAnalyzeContext.Users.Add(newUser);
                    WaterAnalyzeContext.SaveChanges();

                    Account account = new Account()
                    {
                        Login = login,
                        Password = password,
                        UserId = newUser.Id
                    };

                    WaterAnalyzeContext.Accounts.Add(account);
                    WaterAnalyzeContext.SaveChanges();

                    Snackbar.Add("Успешно", Severity.Success);

                    Navigation.NavigateTo("/workerList");

                    // EducationClubContext.Entry(newClub).State = EntityState.Detached;
                    // User userData = new User()
                    //     {
                    //         Surname = surname,
                    //         Name = name,
                    //         Patronymic = patronymic,
                    //         Login = login,
                    //         Password = password,
                    //         RoleName = role
                    //     };
                    // DBConnection.AddToDataBase(userData);

                    // Snackbar.Add("Успешно", Severity.Success);
                    // navigation.NavigateTo("/admin");

                }
                else
                {
                    Snackbar.Add("Пользователь с такими данными уже существует.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Не все необходимые поля заполнены.", Severity.Error);
            }
        }
    }
}

<style>
    body {
        background-color: #fafafa;
    }
</style>
