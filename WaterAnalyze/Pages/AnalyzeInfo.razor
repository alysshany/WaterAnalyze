@page "/analyzeInfo"
@page "/analyzeInfo/{analyzeId}"
@using Data
@using Microsoft.JSInterop
@inject ISnackbar Snackbar
@inject WaterAnalyzeContext WaterAnalyzeContext
@inject CurrentUser CurrentUser
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Главная</PageTitle>



<MudCard Elevation="5" Style="display: flex; width: 90%; border-radius: 15px; margin-left: auto;margin-right: auto; margin-top: 1%;">
<MudGrid >
	<MudItem xs="6">
			<MudPaper Elevation="5" Style="border-radius: 10px; background-color: #72abce; margin-left: 2%; margin-right: 2%; margin-top: 2%">
@* 			@if (sourceTitle == null)
			{
				<MudImage Src='/img/colb.jpg' Style=" object-fit: cover; overflow:hidden; height: 400px; width: 100%; border-radius: 10px;"></MudImage>
			}
			else
			{ *@
				<div id="map"></div>
@* 			} *@
		</MudPaper>
	</MudItem>
	<MudItem xs="6" >
			@if (newOne)
			{
				<MudCard Elevation="5" Style="background-color: #e5e5e5; border-radius: 10px; margin: 2%;">
					<div Class="d-flex mx-auto" style="display: inline-block; padding: 1%;">
						<MudSelect Value="@sourceType" T="String" Label="Иточник:" ValueChanged="TypeChange" Style="font-size: 16px; margin: 0; margin-bottom: 10px">
							@foreach (var indic in sourceTypes)
							{
								<MudSelectItem Value="@indic.Title" />
							}
						</MudSelect>
						<MudSelect Value="@sourceTitle" T="String" Label="Точка отбора:" ValueChanged="SourceChange" Style="font-size: 16px; margin: 0; margin-bottom: 10px">
							@foreach (var indic in sourceTitles)
							{
								<MudSelectItem Value="@indic.Title" />
							}
						</MudSelect>
					</div>
					<MudDatePicker Label="Дата отбора:" Editable="true" @bind-Date="date" Placeholder="Выберите дату" Style="padding: 1%;" />
					<MudSelect Value="@sampleValue" Label="Объем" T="String" ValueChanged="SampleChange" Style="padding: 1%;font-size: 16px; margin: 0; margin-bottom: 10px">
						@foreach (var indic in sampleValues)
						{
							<MudSelectItem Value
							="@indic.Value" />
						}
					</MudSelect>
				</MudCard>
			}
			else{
				@* <MudCard Elevation="5" Style="background-color: #e5e5e5; border-radius: 10px; margin: 2%;">
					<div Class="d-flex mx-auto" style="display: inline-block; padding: 1%;">
						<MudText>@source.Title</MudText>
						<MudText>@WaterAnalyzeContext.SourceTypes.Where(x => x.Id == source.SourceTypeId).First().Title</MudText>
						<MudText>@analyze.DateOfSelection.Value.ToShortDateString()</MudText>
						<MudText>@analyze.Date.Value.ToShortDateString()</MudText>
						<MudText>@WaterAnalyzeContext.Samples.Where(x => x.Id == analyze.SampleId).First().Value</MudText>
					</div>
					
				</MudCard> *@

				<MudPaper Elevation="0">
					<MudCard Elevation="5" Style="background-color: #e5e5e5; border-radius: 10px; margin: 2%;">

						<MudPaper Elevation="0" Style="background-color: #e5e5e5; margin: 2%; padding: 1%;  ">

							<MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="padding: 3%; color: black; border-radius: 10px; margin: 2%" Class="d-flex mx-auto">@source.Title</MudButton>
						</MudPaper>

					</MudCard>
					<MudCard Elevation="0" Style="display: flex;  border-radius: 10px; margin: 2%;">
						<MudPaper Elevation="0" Style="flex: 50%; ">
							<MudText Style=" margin: 1%; text-align:center">Дата взятия пробы</MudText>
							<MudPaper Elevation="5" Style="flex: 50%; background-color: #72abce; margin: 2%; height: 70px; display: flex; justify-content: center; align-items: center;">

								<MudText Typo="Typo.body2" Style="color: white; text-align: center; font-size: 18px; ">@analyze.DateOfSelection.Value.ToShortDateString()</MudText>
							</MudPaper>
						</MudPaper>
						<MudPaper Elevation="0" Style="flex: 50%; ">
							<MudText Style=" margin: 1%; text-align:center">Дата проведения анализа</MudText>
							<MudPaper Elevation="5" Style="flex: 50%; background-color: #e5e5e5; margin: 2%; height: 70px; display: flex; justify-content: center; align-items: center;">

								<MudText Typo="Typo.body2" Style=" text-align: center;font-size: 18px; ">@analyze.Date.Value.ToShortDateString()</MudText>
							</MudPaper>
						</MudPaper>
					</MudCard>

					<MudCard Elevation="0" Style="display: flex;  border-radius: 10px; margin: 2%;">
						<MudPaper Elevation="0" Style="flex: 50%; ">
							<MudText Style=" margin: 1%; text-align:center">Тип</MudText>
							<MudPaper Elevation="5" Style="flex: 50%; background-color: #e5e5e5; margin: 2%; height: 70px; display: flex; justify-content: center; align-items: center;">

								<MudText Style="text-align: center; font-size: 18px; ">@WaterAnalyzeContext.SourceTypes.Where(x => x.Id == source.SourceTypeId).First().Title</MudText>
							</MudPaper>
						</MudPaper>
						<MudPaper Elevation="0" Style="flex: 50%; ">
							<MudText Style=" margin: 1%; text-align:center">Объем</MudText>
							<MudPaper Elevation="5" Style="flex: 50%; background-color: #72abce; margin: 2%; height: 70px; display: flex; justify-content: center; align-items: center;">

								<MudText Style="color: white; text-align: center; font-size: 18px; ">@WaterAnalyzeContext.Samples.Where(x => x.Id == analyze.SampleId).First().Value</MudText>
							</MudPaper>
						</MudPaper>
					</MudCard>

				</MudPaper>
			}
			@if (!newOne)
			{
				<div Class="d-flex mx-auto" style="display: inline-block;">
					<MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="d-flex mx-auto" Style="margin: 15px; font-size: 16px; width: 30%; box-shadow: rgb(38, 57, 77) 0px 3px 3px -3px;">
						Удалить
					</MudButton>
				</div>
			}
			else
			{
				<MudButton Variant="Variant.Outlined" OnClick="SavingAnalyze" Color="Color.Primary" Class="d-flex mx-auto" Style="margin: 15px; font-size: 16px; width: 30%; ">
					Сохранить
				</MudButton>
			}
	</MudItem>
	@if (newOne)
	{
		<MudPagination Style="margin: auto" @bind-Selected="@_selected" Class="d-flex mx-auto" Variant="Variant.Filled" Count="8" />
	}
	<MudItem xs="12" Style="overflow:scroll; height: 170px; margin-top: 1px">
		@if (newOne)
		{
				@if (_selected == 1)
				{

					<MudText Style="margin-left: 1%">Хлориды <a href="/files/Хлориды.pdf">(ПНД Ф)</a> <MudImage Src='/img/Хлориды.jpg' Style=" object-fit: cover; overflow:hidden; height: 40px; width: 120px; "></MudImage> <MudButton Color="Color.Primary" OnClick="@(()=> chlorideView = false)" Style="font-size: 10px; ">Свернуть</MudButton> <MudButton OnClick="@(()=> chlorideView = true)" Color="Color.Primary" Style="font-size: 10px;">Развернуть</MudButton></MudText>
					@if (chlorideView)
					{
						<MudPaper Style="display: inline-block; margin-left: 1%" Class="d-flex mx-auto">
							<MudTextField TextChanged="ChlorideChange" @bind-Value="firstChloride" Converter="@_converter" T="Double?" Label="Объем нитрата ртути(первое значение)" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField TextChanged="ChlorideChange" @bind-Value="secondChloride" Converter="@_converter" T="Double?" Label="Объем нитрата ртути(второе значение)" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField TextChanged="ChlorideChange" @bind-Value="thirdChloride" Converter="@_converter" T="Double?" Label="Молярная концентрация раствора" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField ReadOnly="true" T="Double?" @bind-Value="resultChloride"></MudTextField>
						</MudPaper>
						@if (resultChloride != null && resultChloride.ToString() != "0" && Math.Abs(Convert.ToDouble(firstChlorideRes) - Convert.ToDouble(secondChlorideRes)) > 0.1 * Convert.ToDouble(resultChloride))
						{
							<MudText Style="margin-left: 1%">Анализ необходимо переделать, значения неверные</MudText>
						}
					}
				}
				if (_selected == 2)
				{
					<MudText Style="margin-left: 1%">Гидрокарбонаты <a href="/files/Гидрокарбонат.pdf">(ПНД Ф)</a> <MudImage Src='/img/Гидрокарбонат.jpg' Style=" object-fit: cover; overflow:hidden; height: 40px; width: 220px; "></MudImage>  <MudButton Color="Color.Primary" OnClick="@(()=> gidrocorbonatView = false)" Style="font-size: 10px; ">Свернуть</MudButton> <MudButton OnClick="@(()=> gidrocorbonatView = true)" Color="Color.Primary" Style="font-size: 10px;">Развернуть</MudButton></MudText>
					@if (gidrocorbonatView)
					{
						<MudPaper Style="display: inline-block;" Class="d-flex mx-auto">
							<MudTextField TextChanged="GidrocorbonatChange" @bind-Value="firstGidrocorbonat" Converter="@_converter" T="Double?" Label="Объем раствора кислоты(первое значение)" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField TextChanged="GidrocorbonatChange" @bind-Value="secondGidrocorbonat" Converter="@_converter" T="Double?" Label="Объем раствора буры(первое значение)" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField TextChanged="GidrocorbonatChange" @bind-Value="thirdGidrocorbonat" Converter="@_converter" T="Double?" Label="Объем раствора кислоты(второе значение)" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField TextChanged="GidrocorbonatChange" @bind-Value="fourthGidrocorbonat" Converter="@_converter" T="Double?" Label="Объем раствора буры(второе значение)" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField ReadOnly="true" @bind-Value="resultGidrocorbonat" T="Double?" Label="Результат" Variant="Variant.Outlined" Style="font-size: 12px; " />
						</MudPaper>

						@if (resultGidrocorbonat != null && resultGidrocorbonat.ToString() != "0" && ((200 * (Math.Abs(Convert.ToDouble(firstGidrocorbonatRes) - Convert.ToDouble(secondGidrocorbonatRes)))) / (Convert.ToDouble(firstGidrocorbonatRes) + Convert.ToDouble(secondGidrocorbonatRes))) > 8)
						{
							<MudText>Анализ необходимо переделать, значения неверные</MudText>
						}
					}
				}
				@if (_selected == 3)
				{
					<MudText Style="margin-left: 1%">Сульфаты <MudButton Color="Color.Primary" OnClick
						="@(()=> sulfatView = false)" Style
						="font-size: 10px; ">Свернуть</MudButton> <MudButton OnClick
						="@(()=> sulfatView = true)" Color
						="Color.Primary" Style
						="font-size: 10px;">Развернуть</MudButton></MudText>
					@if (sulfatView)
					{
						<MudPaper Style
						="display: inline-block;" Class
						="d-flex mx-auto">
							<MudTextField TextChanged="SulfatChange" @bind-Value="firstSulfat" Converter="@_converter" T="Double?" Label="Коэф(первое значение)" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField TextChanged="SulfatChange" @bind-Value="secondSulfat" Converter="@_converter" T="Double?" Label="Коэф(второе значение)" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField ReadOnly="true" @bind-Value="resultSulfat" Converter="@_converter" T="Double?" Label="Результат" Variant="Variant.Outlined" Style="font-size: 12px; " />
						</MudPaper>

						@if (resultSulfat != null && resultSulfat.ToString() != "0" && (Math.Abs(Convert.ToDouble(firstSulfatRes) - Convert.ToDouble(secondSulfatRes))) > (17 * (Convert.ToDouble(firstSulfatRes) + Convert.ToDouble(secondSulfatRes))) / 200 && (Math.Abs(Convert.ToDouble(firstSulfatRes) - Convert.ToDouble(secondSulfatRes))) > (11 * (Convert.ToDouble(firstSulfatRes) + Convert.ToDouble(secondSulfatRes))) / 200)
						{
							<MudText>Анализ необходимо переделать, значения неверные</MudText>
						}
					}
				}
				@if (_selected == 4)
				{
					<MudText Style="margin-left: 1%">Кальций <a href="/files/Кальций.pdf">(ПНД Ф)</a> <MudImage Src='/img/Кальций.jpg' Style=" object-fit: cover; overflow:hidden; height: 30px; width: 100px; "></MudImage>  <MudButton Color="Color.Primary" OnClick="@(()=> calciyView = false)" Style="font-size: 10px; ">Свернуть</MudButton> <MudButton OnClick="@(()=> calciyView = true)" Color="Color.Primary" Style="font-size: 10px;">Развернуть</MudButton></MudText>
					@if (calciyView)
					{
						<MudPaper Style
						="display: inline-block;" Class
						="d-flex mx-auto">
							<MudTextField TextChanged="CalciyChange" @bind-Value="firstCalciy" Converter="@_converter" T="Double?" Label="Объем раствора трилона(первое значение)" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField TextChanged="CalciyChange" @bind-Value="secondCalciy" Converter="@_converter" T="Double?" Label="Объем раствора трилона(второе значение)" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField @bind-Value="resultCalciy" T="Double?" Label="Результат" Variant="Variant.Outlined" Style="font-size: 12px; " />
						</MudPaper>

						@if (resultCalciy != null && resultCalciy.ToString() != "0" && ((Math.Abs(Convert.ToDouble(firstCalciyRes) - Convert.ToDouble(secondCalciyRes))) / (Convert.ToDouble(firstCalciyRes) + Convert.ToDouble(secondCalciyRes))) * 200 > 8)
						{
							<MudText>Анализ необходимо переделать, значения неверные</MudText>
						}

					}
				}
				if (_selected == 5)
				{
					<MudText Style="margin-left: 1%">Жесткость <a href="/files/Жесткость.pdf">(ПНД Ф)</a> <MudImage Src='/img/Жесткость.jpg' Style=" object-fit: cover; overflow:hidden; height: 30px; width: 80px; "></MudImage>  <MudButton Color="Color.Primary" OnClick
						="@(()=> hardnessView = false)" Style
						="font-size: 10px; ">Свернуть</MudButton> <MudButton OnClick
						="@(()=> hardnessView = true)" Color
						="Color.Primary" Style
						="font-size: 10px;">Развернуть</MudButton></MudText>
					@if (hardnessView)
					{
						<MudPaper Style="display: inline-block;" Class="d-flex mx-auto">
							<MudTextField TextChanged="HardnessChange" @bind-Value="firstHardness" Converter="@_converter" T="Double?" Label="Объем раствора трилона(первое значение)" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField TextChanged="HardnessChange" @bind-Value="secondHardness" Converter="@_converter" T="Double?" Label="Объем раствора трилона(второе значение)" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField @bind-Value="resultHardness" T="Double?" Label="Результат" Variant="Variant.Outlined" Style="font-size: 12px; " />
						</MudPaper>

						@if (resultHardness != null && resultHardness.ToString() != "0" && (((Math.Abs(Convert.ToDouble(firstHardnessRes) - Convert.ToDouble(secondHardnessRes))) / (Convert.ToDouble(firstHardnessRes) + Convert.ToDouble(secondHardnessRes))) * 200) > 6)
						{
							<MudText>Анализ необходимо переделать, значения неверные</MudText>
						}
					}
				}
				@if (_selected == 6)
				{
					<MudText Style="margin-left: 1%">
						PH <a href="/files/Водородный.pdf">(ПНД Ф)</a> <MudImage Src='/img/Водородный.jpg' Style=" object-fit: cover; overflow:hidden; height: 30px; width: 80px; "></MudImage>  <MudButton Color="Color.Primary" OnClick
						="@(()=> phView = false)" Style
						="font-size: 10px; ">Свернуть</MudButton> <MudButton OnClick
						="@(()=> phView = true)" Color
						="Color.Primary" Style
						="font-size: 10px;">Развернуть</MudButton></MudText>
					@if (phView)
					{
						<MudPaper Style
						="display: inline-block;" Class
						="d-flex mx-auto">
							<MudTextField TextChanged="PHChange" @bind-Value="firstPH" Converter="@_converter" T="Double?" Label="Первое значение" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField TextChanged="PHChange" @bind-Value="secondPH" Converter="@_converter" T="Double?" Label="Второе значение" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField @bind-Value="resultPH" Label="Результат" Variant="Variant.Outlined" Style="font-size: 12px; " />

						</MudPaper>
						@if (resultPH != null && resultPH.ToString() != "0" && Math.Abs(Convert.ToDouble(firstPH) - Convert.ToDouble(secondPH)) > 0.2)
						{
							<MudText>Анализ необходимо переделать, значения неверные</MudText>
						}
					}
				}
				if (_selected == 7)
				{
					<MudText Style="margin-left: 1%">Нефтепродукты <a href="/files/Нефтепродукты.pdf">(ПНД Ф)</a> <MudImage Src='/img/Нефтепродукты.jpg' Style=" object-fit: cover; overflow:hidden; height: 30px; width: 80px; "></MudImage>  <MudButton Color="Color.Primary" OnClick="@(()=> oilView = false)" Style="font-size: 10px; ">Свернуть</MudButton> <MudButton OnClick="@(()=> oilView = true)" Color="Color.Primary" Style="font-size: 10px;">Развернуть</MudButton></MudText>
					@if (oilView)
					{
						<MudPaper Style
						="display: inline-block;" Class
						="d-flex mx-auto">
							<MudTextField TextChanged="OilChange" @bind-Value="firstOil" Converter="@_converter" T="Double?" Label="Концентрация НП" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField TextChanged="OilChange" @bind-Value="secondOil" Converter="@_converter" T="Double?" Label="Объем пробы" Variant="Variant.Outlined" Style="font-size: 12px; " />
							<MudTextField @bind-Value="resultOil" T="Double?" Label="Результат" Variant="Variant.Outlined" Style="font-size: 12px; " />
						</MudPaper>
					}
				}
				@if (_selected == 8)
				{
					<MudText Style="margin-left: 1%">Магний <MudButton Color="Color.Primary" OnClick="@(()=> magniyView = false)" Style="font-size: 10px; ">Свернуть</MudButton> <MudButton OnClick="@(()=> magniyView = true)" Color="Color.Primary" Style="font-size: 10px;">Развернуть</MudButton></MudText>
					@if (magniyView)
					{
						<MudPaper Style="display: inline-block;" Class="d-flex mx-auto">
							<MudTextField @bind-Value="resultMagniy" T="String" Label="Результат" Variant="Variant.Outlined" Style="font-size: 12px; " />
						</MudPaper>
					}
				}

		}
		else
		{
			<MudCard Elevation="0" Style="display: flex;  border-radius: 10px; margin: 2%;">
				<MudPaper Elevation="0" Style="flex: 20%; ">
					<MudText Style=" margin: 1%; text-align:center">PH</MudText>
						<MudPaper Elevation="5" Style="flex: 20%; background-color: #72abce; margin: 2%; height: 70px; display: flex; justify-content: center; align-items: center;">

						<MudText Typo="Typo.body2" Style="color: white; text-align: center">@analyze.AcidityIndex</MudText>
					</MudPaper>
				</MudPaper>
				<MudPaper Elevation="0" Style="flex: 20%; ">
					<MudText Style=" margin: 1%; text-align:center">Жесткость</MudText>
					<MudPaper Elevation="5" Style="flex: 20%; background-color: #e5e5e5; margin: 2%; height: 70px; display: flex; justify-content: center; align-items: center;">

							<MudText Style=" text-align: center">@analyze.Hardness</MudText>
					</MudPaper>
				</MudPaper>
				<MudPaper Elevation="0" Style="flex: 20%; ">
						<MudText Style=" margin: 1%; text-align:center">Cl</MudText>
						<MudPaper Elevation="5" Style="flex: 20%; background-color: #72abce; margin: 2%; height: 70px; display: flex; justify-content: center; align-items: center;">

							<MudText Style=" text-align: center; color: white;">@analyze.Сhloride</MudText>
					</MudPaper>
				</MudPaper>
				<MudPaper Elevation="0" Style="flex: 20%; ">
					<MudText Style=" margin: 1%; text-align:center">HCO3</MudText>
					<MudPaper Elevation="5" Style="flex: 20%; background-color: #e5e5e5; margin: 2%; height: 70px; display: flex; justify-content: center; align-items: center;">

							<MudText Style=" text-align: center">@analyze.Gidrocorbonat</MudText>
					</MudPaper>
				</MudPaper>
				<MudPaper Elevation="0" Style="flex: 20%; ">
						<MudText Style=" margin: 1%; text-align:center">SO4</MudText>
					<MudPaper Elevation="5" Style="flex: 20%; background-color: #72abce; margin: 2%; height: 70px; display: flex; justify-content: center; align-items: center;">

							<MudText Style=" text-align: center; color: white;">@analyze.Sulfate</MudText>
					</MudPaper>
				</MudPaper>
				<MudPaper Elevation="0" Style="flex: 20%; ">
						<MudText Style=" margin: 1%; text-align:center">Ca</MudText>
					<MudPaper Elevation="5" Style="flex: 20%; background-color: #e5e5e5; margin: 2%; height: 70px; display: flex; justify-content: center; align-items: center;">

							<MudText Style=" text-align: center">@analyze.Calcium</MudText>
					</MudPaper>
				</MudPaper>
				<MudPaper Elevation="0" Style="flex: 20%; ">
						<MudText Style=" margin: 1%; text-align:center">Mg</MudText>
						<MudPaper Elevation="5" Style="flex: 20%; background-color: #72abce; margin: 2%; height: 70px; display: flex; justify-content: center; align-items: center;">

							<MudText Style=" text-align: center; color: white;">@analyze.Magnesium</MudText>
					</MudPaper>
				</MudPaper>
					<MudPaper Elevation="0" Style="flex: 20%; ">
						<MudText Style=" margin: 1%; text-align:center">Нефтепродукты</MudText>
						<MudPaper Elevation="5" Style="flex: 20%; background-color: #e5e5e5; margin: 2%; height: 70px; display: flex; justify-content: center; align-items: center;">

							<MudText Style=" text-align: center">@analyze.Oil</MudText>
						</MudPaper>
					</MudPaper>
			</MudCard>
					
		}
		@* <div>
			@if (CurrentUser.CurrentUserData != null)
			{
				if (CurrentUser.CurrentUserData.RoleId == 2)
				{
					<MudButton Color="Color.Primary" Href="/analyzeInfo" Style="margin-bottom: 2%;">Добавить анализ</MudButton>
				}
			}

			@if (Elements.Count != 0)
			{
				<MudTable Items="@Elements.Take(1)" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
					<HeaderContent>
						<MudTh>Дата отбора</MudTh>
						<MudTh>Дата проведения</MudTh>
						<MudTh>PH</MudTh>
						<MudTh>Общая жесткость</MudTh>
						<MudTh>Cl (мг/л)</MudTh>
						<MudTh>HCO3 (мг/л)</MudTh>
						<MudTh>SO4 (мг/л)</MudTh>
						<MudTh>Ca (мг/л)</MudTh>
						<MudTh>Mg (мг/л)</MudTh>
						<MudTh>Нефть (мг/л)</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd DataLabel="Дата отбора">@context.DateOfSelection.Value.ToShortDateString()</MudTd>
						<MudTd DataLabel="Дата проведения">@context.Date.Value.ToShortDateString()</MudTd>
						<MudTd DataLabel="PH">@context.AcidityIndex</MudTd>
						<MudTd DataLabel="Общая жесткость">@context.Hardness</MudTd>
						<MudTd DataLabel="Cl">@context.Сhlorine</MudTd>
						<MudTd DataLabel="HCO3">@context.Bicarbonate</MudTd>
						<MudTd DataLabel="SO4">@context.Sulfate</MudTd>
						<MudTd DataLabel="Ca">@context.Calcium</MudTd>
						<MudTd DataLabel="Mg">@context.Magnesium</MudTd>
						<MudTd DataLabel="Нефть">@context.Oil</MudTd>
					</RowTemplate>
				</MudTable>
			}
		</div> *@
			
	</MudItem>
		
@*     <div Style="flex: 50%; overflow: scroll">
        <div>
            <div Class="d-flex mx-auto" style="display: inline-block;">
                <MudTextField T="String" Label="Протокол испытаний:" Variant="Variant.Outlined" Style="font-size: 16px; margin: 2%"  />
                <MudTextField T="String" Label="Направление:" Variant="Variant.Outlined" Style="font-size: 16px; margin: 2%" />
            </div>
            <MudTextField T="String" Label="Тип:" Variant="Variant.Outlined" Style=" font-size: 16px; margin: 1%"/>
        </div>
        <div>
            <MudTextField T="String" Label="Место взятия:" Variant="Variant.Outlined" Style="font-size: 16px; margin: 1%" />
            <MudTextField T="String" Label="Дата отбора:" Variant="Variant.Outlined" Style="font-size: 16px; margin: 1%"  />
            <MudTextField T="String" Label="Дата проведения:" Variant="Variant.Outlined" Style="font-size: 16px; margin: 1%" />
        </div>
        <br>
        <div Class="d-flex mx-auto" style="display: inline-block;">
            <MudButton Class="d-flex mx-auto" Style="font-size: 16px; width: 30%; box-shadow: rgb(38, 57, 77) 0px 3px 3px -3px;" Color="Color.Primary" Variant="Variant.Outlined">Заведующий</MudButton>
        </div>
        <br>
        @if (!newOne)
        {
            <div Class="d-flex mx-auto" style="display: inline-block;">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="d-flex mx-auto" Style="margin: 15px; font-size: 16px; width: 30%; box-shadow: rgb(38, 57, 77) 0px 3px 3px -3px;" >
                    Сохранить
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="d-flex mx-auto" Style="margin: 15px; font-size: 16px; width: 30%; box-shadow: rgb(38, 57, 77) 0px 3px 3px -3px;" >
                    Удалить
                </MudButton>
            </div>
        }
        else
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="d-flex mx-auto" Style="margin: 15px; font-size: 16px; width: 30%; box-shadow: rgb(38, 57, 77) 0px 3px 3px -3px;" >
                Сохранить
            </MudButton>
        }
    </div> *@
</MudGrid>
</MudCard>

@* <MudGrid Style="width: 60%; height: 30%;display: block;margin-left: auto;margin-right: auto; margin-top: 2%;">
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=12</MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=6</MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=6</MudPaper>
    </MudItem>
    
</MudGrid> *@


@code {
	[Parameter]
	public string? analyzeId { get; set; }

	private int _selected = 1;

	Source source;
	Analyze analyze;
	bool newOne;
	private bool _hidePosition;
	private bool _loading;
	private List<Analyze> Elements = new List<Analyze>();
	public string sourceType;
	public string sourceTitle;
	public string sampleValue;
	DateTime? date = DateTime.Today;

	bool chlorideView;
	bool gidrocorbonatView;
	bool sulfatView;
	bool calciyView;
	bool magniyView;
	bool phView;
	bool oilView;
	bool hardnessView;

	double? firstPH;
	double? secondPH;
	double? resultPH;

	double? firstHardness;
	double? secondHardness;
	double? firstHardnessRes;
	double? secondHardnessRes;
	double? resultHardness;

	double? firstSulfat;
	double? secondSulfat;
	double? firstSulfatRes;
	double? secondSulfatRes;
	double? resultSulfat;

	double? firstOil;
	double? secondOil;
	double? resultOil;

	double? firstChloride;
	double? secondChloride;
	double? thirdChloride;
	double? firstChlorideRes;
	double? secondChlorideRes;
	double? resultChloride;

	double? firstCalciy;
	double? secondCalciy;
	double? firstCalciyRes;
	double? secondCalciyRes;
	double? resultCalciy;

	double? firstGidrocorbonat;
	double? secondGidrocorbonat;
	double? thirdGidrocorbonat;
	double? fourthGidrocorbonat;
	double? firstGidrocorbonatRes;
	double? secondGidrocorbonatRes;
	double? resultGidrocorbonat;

	string resultMagniy;

	List<SourceType> sourceTypes = new List<SourceType>();
	List<Source> sourceTitles = new List<Source>();
	List<Sample> sampleValues = new List<Sample>();

	private WaterAnalyze.Data.DefaultConverter<double?> _converter = new WaterAnalyze.Data.DefaultConverter<double?>();


	// protected override void OnInitialized()
	// {

	// 	if (analyzeId != null)
	// 	{
	// 		source = WaterAnalyzeContext.Sources.Where(x => x.Id == Convert.ToInt32(analyzeId)).First();
	// 		Elements = WaterAnalyzeContext.Analyzes.Where(x => x.SourceId == Convert.ToInt32(analyzeId)).ToList();
	// 		Elements.Reverse();
	// 	}
	// }

	protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
	{


		if (analyzeId != null)
		{
			analyze = WaterAnalyzeContext.Analyzes.Where(x => x.Id == Convert.ToInt32(analyzeId)).First();
			source = WaterAnalyzeContext.Sources.Where(x => x.Id == analyze.SourceId).First();
			// Elements = WaterAnalyzeContext.Analyzes.Where(x => x.SourceId == Convert.ToInt32(analyzeId)).ToList();
			// Elements.Reverse();

			if (firstRender)
			{
				await JSRuntime.InvokeVoidAsync("start", source.CoordinatesX, source.CoordinatesY);
			}
		}


	}

	protected override void OnInitialized()
	{
		newOne = true;
		sourceTypes = WaterAnalyzeContext.SourceTypes.ToList();
		sampleValues = WaterAnalyzeContext.Samples.ToList();

		if (analyzeId != null)
		{
			newOne = false;
			analyze = WaterAnalyzeContext.Analyzes.Where(x => x.Id == Convert.ToInt32(analyzeId)).First();
			source = WaterAnalyzeContext.Sources.Where(x => x.Id == analyze.SourceId).First();

		}
	}

	public void SulfatChange()
	{

		if (firstSulfat.ToString() != "" && secondSulfat.ToString() != "")
		{
			firstSulfatRes = ((1000 * Convert.ToDouble(firstSulfat)) / 10);
			secondSulfatRes = ((1000 * Convert.ToDouble(secondSulfat)) / 10);
			resultSulfat = Math.Round(((Convert.ToDouble(firstSulfatRes) + Convert.ToDouble(secondSulfatRes)) / 2), 2);
		}
	}

	public void GidrocorbonatChange()
	{

		if (firstGidrocorbonat.ToString() != "" && secondGidrocorbonat.ToString() != "" && thirdGidrocorbonat.ToString() != "" && fourthGidrocorbonat.ToString() != "")
		{
			firstGidrocorbonatRes = ((61.02 * (Convert.ToDouble(firstGidrocorbonat) * 0.05 - 2 * Convert.ToDouble(secondGidrocorbonat) * 0.05) * 1000) / 100);
			secondGidrocorbonatRes = ((61.02 * (Convert.ToDouble(thirdGidrocorbonat) * 0.05 - 2 * Convert.ToDouble(fourthGidrocorbonat) * 0.05) * 1000) / 100);
			resultGidrocorbonat = Math.Round(((Convert.ToDouble(firstGidrocorbonatRes) + Convert.ToDouble(secondGidrocorbonatRes)) / 2), 2);
		}
	}

	public void ChlorideChange()
	{

		if (firstChloride.ToString() != "" && secondChloride.ToString() != "" && thirdChloride.ToString() != "")
		{
			firstChlorideRes = Math.Round((((Convert.ToDouble(firstChloride) - 0.10) * Convert.ToDouble(thirdChloride) * 35.45 * 1000) / 100), 2);
			secondChlorideRes = Math.Round((((Convert.ToDouble(secondChloride) - 0.10) * Convert.ToDouble(thirdChloride) * 35.45 * 1000) / 100), 2);
			resultChloride = Math.Round(((Convert.ToDouble(firstChlorideRes) + Convert.ToDouble(secondChlorideRes)) / 2), 2);

		}
	}

	public void CalciyChange()
	{

		if (firstCalciy.ToString() != "" && secondCalciy.ToString() != "")
		{
			firstCalciyRes = ((40.08 * 0.01 * Convert.ToDouble(firstCalciy) * 1000) / 100);
			secondCalciyRes = ((40.08 * 0.01 * Convert.ToDouble(secondCalciy) * 1000) / 100);
			resultCalciy = Math.Round(((Convert.ToDouble(firstCalciyRes) + Convert.ToDouble(secondCalciyRes)) / 2), 2);

			if (resultHardness != null)
			{
				resultMagniy = Math.Round((Convert.ToDouble(resultHardness) - (Convert.ToDouble(resultCalciy) / 20.04)), 2).ToString();
			}
		}
	}

	public void OilChange()
	{

		if (firstOil.ToString() != "" && secondOil.ToString() != "")
		{
			resultOil = Math.Round(((Convert.ToDouble(firstOil) * 10 * 1) / (Convert.ToDouble(secondOil))), 3);
		}
	}

	public void HardnessChange()
	{

		if (firstHardness.ToString() != "" && secondHardness.ToString() != "")
		{
			firstHardnessRes = ((0.01 * 2 * 1000 * Convert.ToDouble(firstHardness)) / 50);
			secondHardnessRes = ((0.01 * 2 * 1000 * Convert.ToDouble(secondHardness)) / 50);
			resultHardness = Math.Round(((Convert.ToDouble(firstHardnessRes) + Convert.ToDouble(secondHardnessRes))/ 2), 2);

			if (resultCalciy != null)
			{
				resultMagniy = Math.Round((Convert.ToDouble(resultHardness) - (Convert.ToDouble(resultCalciy) / 20.04)), 2).ToString();
			}
		}
	}

	public void PHChange()
	{

		if (firstPH.ToString() != "" && secondPH.ToString() != "")
		{
			resultPH = Math.Round(((Convert.ToDouble(firstPH) + Convert.ToDouble(secondPH)) / 2), 2);
		}
	}

	public void TypeChange(string selected)
	{
		sourceType = selected;

		if (sourceType != null)
		{
			var type = WaterAnalyzeContext.SourceTypes.Where(x => x.Title == sourceType).First().Id;
			sourceTitles = WaterAnalyzeContext.Sources.Where(x => x.SourceTypeId == type).ToList();
		}
	}

	public void SourceChange(string selected)
	{
		sourceTitle = selected;

		if (sourceTitle != null)
		{
			JSRuntime.InvokeVoidAsync("deleteMap");
			var source = WaterAnalyzeContext.Sources.Where(x => x.Title == sourceTitle).First();
			JSRuntime.InvokeVoidAsync("start", source.CoordinatesX, source.CoordinatesY);
		}
	}

	public void SampleChange(string selected)
	{
		sampleValue = selected;

		// if (sourceTitle != null)
		// {
		// 	var type = WaterAnalyzeContext.Sources.Where(x => x.Id == Convert.ToInt32(analyzeId)).First().Id;
		// 	sourceTitles = WaterAnalyzeContext.Sources.Where(x => x.SourceTypeId == type).ToList();
		// }
	}

	public void SavingAnalyze()
	{
		if (resultCalciy != null && resultChloride != null && resultGidrocorbonat != null && resultHardness != null && resultOil != null && resultSulfat != null && resultMagniy != null && sourceTitle != null && date != null && sampleValue != null)
		{
			var source = WaterAnalyzeContext.Sources.Where(x => x.Title == sourceTitle).First();
			var sample = WaterAnalyzeContext.Samples.Where(x => x.Value == sampleValue).First();

			Analyze analyze = new Analyze()
			{
				Date = DateTime.Today,
				AcidityIndex = Convert.ToDouble(resultPH),
				Hardness = Convert.ToDouble(resultHardness),
				Сhloride = Convert.ToDouble(resultChloride),
				Gidrocorbonat = Convert.ToDouble(resultGidrocorbonat),
				Sulfate = Convert.ToDouble(resultSulfat),
				Calcium = Convert.ToDouble(resultCalciy),
				Magnesium = Convert.ToDouble(resultMagniy),
				Oil = Convert.ToDouble(resultOil),
				DateOfSelection = date,
				SampleId = sample.Id,
				UserId = CurrentUser.CurrentUserData.Id,
				SourceId = source.Id
			};

			WaterAnalyzeContext.Analyzes.Add(analyze);
			WaterAnalyzeContext.SaveChanges();
			Navigation.NavigateTo("/analyzeList");
			Snackbar.Add("Изменения сохранены", Severity.Success);

		}
		else{
			Snackbar.Add("Не все необходимые поля заполнены.", Severity.Error);
		}
	}
}

<style>
	body {
		background-color: #fafafa;
	}
	#map {
		width: 650px;
		height: 400px;
		padding: 0;
		margin-top: 2%;
		display: block;
		margin-left: auto;
		margin-right: auto;
	}

</style>
