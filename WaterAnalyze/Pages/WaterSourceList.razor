@using Data
@inject WaterAnalyzeContext WaterAnalyzeContext
@inject NavigationManager Navigation;
@page "/sourceList"

<PageTitle>Направления</PageTitle>

<MudCard Elevation="5" Style="display: flex; width: 90%; border-radius: 15px; margin-left: auto;margin-right: auto; margin-top: 1%;">
    <div Style="flex: 50%; overflow: scroll; height: 580px;">
        <MudPaper >
            <MudTable Style="border-radius: 15px;" Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true"
                      @bind-SelectedItems="selectedItems"
                      Items="@Elements"
                      GroupBy="@_groupDefinition"
                      GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                      GroupFooterClass="mb-4"
                      Dense="true"
                      MultiSelection="true"
                      @ref="_tableRef" >
                <ToolBarContent>
                    @* <MudText Typo="Typo.h6">Periodic Elements</MudText> *@

                    <MudButton Variant="Variant.Filled" OnClick="PDF" Style="margin-left: auto;margin-right: auto;"><a href="/files/example.pdf">Сформировать отчет </a></MudButton>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh></MudTh>
                        <MudTh>    </MudTh>
                        <MudTh>    </MudTh>
                    <MudTh>    </MudTh>
                    <MudTh>   </MudTh>
                    <MudTh>    </MudTh>
                    <MudTh>   </MudTh>
                </HeaderContent>
                <GroupHeaderTemplate>
                    <MudTh Style="font-size: 16px" colspan="7">@($"{WaterAnalyzeContext.Directions.Where(x => x.Id == (int)context.Key).First().Title}") </MudTh>
                </GroupHeaderTemplate>
                <RowTemplate >
                        <MudTd colspan="7">
                            <MudCard @onclick="() => ToDirectionInfo(context.Id)">
                                <MudCardContent>
                                    <MudText>@context.Title </MudText>
                                    <MudText Typo="Typo.body2">@WaterAnalyzeContext.SourceTypes.Where(x => x.Id == context.SourceTypeId).First().Title</MudText>
                                <MudText Typo="Typo.body2">@WaterAnalyzeContext.SamplingFrequencies.Where(x => x.Id == context.SamplingFrequencyId).First().Value</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudTd>
                        @* <MudTd  DataLabel="Название" @onclick="() => ToDirectionInfo(context.Id)">@context.Title</MudTd>
                        <MudTd DataLabel="Тип" @onclick="() => ToDirectionInfo(context.Id)">@WaterAnalyzeContext.SourceTypes.Where(x => x.Id == context.SourceTypeId).First().Title</MudTd>
                        <MudTd DataLabel="Частота отбора" @onclick="() => ToDirectionInfo(context.Id)"> @WaterAnalyzeContext.SamplingFrequencies.Where(x => x.Id == context.SamplingFrequencyId).First().Value</MudTd> *@
                </RowTemplate>
            @*     <GroupFooterTemplate>
                    <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Total Mass: @context.Items.Sum((e) => e.Molar)</MudTh>
                </GroupFooterTemplate> *@
            </MudTable>
        </MudPaper>
    </div>
@* 
    <div Style="flex: 50%;">
        <MudImage Src='/img/paperOne.jpg' Style="width: 100%; object-fit: fill"></MudImage>
    </div> *@

    <MudCard Elevation="0" Style="flex: 50%; border-radius: 10px; padding: 10px">
        <MudImage Elevation="5" Src='/img/paperOne.jpg' Style="width: 700px; height: 580px; object-fit: fill; border-radius: 10px;"></MudImage>
    </MudCard>
</MudCard>

@code {
    private HashSet<Source> selectedItems = new HashSet<Source>();
    private MudTable<Source> _tableRef;

    private  TableGroupDefinition<Source> _groupDefinition = new()
        {
            GroupName = "Group",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.DirectionId
        };

    private IEnumerable<Source> Elements = new List<Source>();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Elements = WaterAnalyzeContext.Sources.Where(x => x.IsDeleted == false).ToList();
    }

    public void ToDirectionInfo(int id)
    {
        Navigation.NavigateTo($"/sourceInfo/{id}");
    }

    public void PDF()
    {
        PdfGenerator.GenerateMany(WaterAnalyzeContext, selectedItems);

    }
}

<style>
    body {
        background-color: #fafafa;
    }
</style>